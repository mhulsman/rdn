% RDN - Call RDN scripts developped by
% Marc Hulsman, 2010
% Information & Communication Theory Group
% Faculty of Electrical Engineering, Mathematics and Computer Science
% Delft University of Technology, Mekelweg 4, 2628 CD Delft, The
% Netherlands
% http://bioinformatics.tudelft.nl/users/marc-hulsman

%
%  RDN(ACTION,EXPNAME,CELDIR,,CHIPNAME,CHIPDIR,LIBDIR);
%
% INPUT
% Action: Action to apply:
%           'cel': load cel files and save them in rdn format for further
%                  processing.
%           'info': recover all information on chip, probe sets and
%                   targeted genes necessary to rdn algorithms
%           'rdn': rdn algorithm
%           'print': print results (probe set name, array factor)
% ExpName: Experiment name used to name saved results
% CelDir: Directory where cel files are stored. All CEL files present in
%         this directory will be loaded. Pay attention that only wanted CEL files
%         are present in this directory, and that no other file containing the
%         substring 'cel' in its name is present.
% ChipName: The name of the chip. cdf, gin, probe and target sequence files
%           used in affy_rdn('info') must have their name compatible with
%           ChipName (e.g.<ChipName>.cdf,<ChipName>.gin,<ChipName>.probe_tab,<ChipName>.target)
% ChipDir: The directory where to store files generated by
%          affy_rdn('info')
% LibDir: The directory where to read cdf,gin,probe_tab and target files.
%         If LibDir=<ChipDir>/LibFiles, this last input parameter is
%         dispensable.

% OUTPUT
%   No output. Results are written in CelDir.
%
% VERSION
%   V01 - 12/07/2010 - works with RDN v0.20

% (c) - Michel Bellis, 2010
% CRBM -CNRS
% 1919 rte de Mende, 34293 Montpellier cedex5
% France



function affy_rdn(Action,ExpName,CelDir,ChipName,ChipDir,LibDir)

switch Action
    case 'cel'
        if nargin~=3
            h=errordlg('affy_rdn(''cel'') needs three parameters : Action, ExpName,CelDir');
            waitfor(h)
        end
        %IMPORT RAW CEL DATA
        %force Dir to be terminated by a separator
        if CelDir(end)~=filesep
            CelDir=[CelDir,filesep];
        end
        cd(CelDir)
        celpaths = dir_filter(CelDir,'.cel');
        cel = mt_readcel(celpaths);
        eval(sprintf('save %s_cel cel;',ExpName))

    case 'info'
        if nargin<5
            h=errordlg('affy_rdn(''info'') needs at least five parameters : Action, ExpName,CelDir, ChipName, ChipDir (LibDir)');
            waitfor(h)
        elseif nargin==6
            %default LibDir
            LibDir=fullfile(ChipDir,'LibFiles');
            %force Dir to be terminated by a separator
            if ChipDir(end)~=filesep
                ChipDir=[ChipDir,filesep];
            end
        else
            %force Dir to be terminated by a separator
            if ChipDir(end)~=filesep
                ChipDir=[ChipDir,filesep];
            end
            if LibDir(end)~=filesep
                LibDir=[LibDir,filesep];
            end
        end

        %IMPORT AFFY INFORMATION FILES
        cd(LibDir)
        eval(sprintf('cdf = mt_readcdf(''%s.cdf'');',ChipName))
        cd(ChipDir)
        eval(sprintf('save %s_cdf cdf;',ChipName))

        cd(LibDir)
        eval(sprintf('gin = mt_readgin(''%s.gin'');',ChipName))
        cd(ChipDir)
        eval(sprintf('save %s_gin gin;',ChipName))


        cd(LibDir)
        eval(sprintf('pa = mt_readprobe_annot(''%s.probe_tab'');',ChipName))
        cd(ChipDir)
        eval(sprintf('save %s_pa pa;',ChipName))


        cd(LibDir)
        eval(sprintf('seq = mt_readseq(''%s.target'');',ChipName))
        cd(ChipDir)
        eval(sprintf('save %s_seq seq;',ChipName))

    case 'rdn'
        if nargin<5
            h=errordlg('affy_rdn(''rdn'') needs five parameters : Action, ExpName,CelDir, ChipName, ChipDir');
            waitfor(h)
        else
            %force Dir to be terminated by a separator
            if ChipDir(end)~=filesep
                ChipDir=[ChipDir,filesep];
            end
        end

        cd(ChipDir)
        eval(sprintf('load %s_cdf;',ChipName))
        eval(sprintf('load %s_gin;',ChipName))
        eval(sprintf('load %s_pa;',ChipName))
        eval(sprintf('load %s_seq;',ChipName))
        cd(CelDir)
        %make probes structure
        %the initial state of probes is saved in order to start again rdn
        %if something fails in mt_normalize
        if ~exist(sprintf('%s_probes_start probes;',ExpName),'file')
            eval(sprintf('load %s_cel',ExpName))
            probes = mt_cel2probes(cel,cdf,gin,pa,seq);
            cd(CelDir)
            eval(sprintf('save %s_probes_start probes;',ExpName))
        else
            eval(sprintf('load %s_probes_start;',ExpName))
        end
        %rdn algorithm
        probes= mt_normalize(probes);
        cd(CelDir)
        eval(sprintf('save %s_probes_end probes;',ExpName))

    case 'print'
        if nargin<3
            h=errordlg('affy_rdn(''print'') needs three parameters : Action, ExpName,CelDir');
            waitfor(h)
        else
            %force Dir to be terminated by a separator
            if CelDir(end)~=filesep
                CelDir=[CelDir,filesep];
            end
        end
        cd(CelDir)
        eval(sprintf('load %s_probes_end;',ExpName))
        OutFid=fopen(sprintf('%s_rdn.txt',ExpName),'w');

        %print header
        %adopt BioConductor format (only Chip Names, not probe set
        %column name
        for ChipL=1:length(probes.array_filenames)-1
            fprintf(OutFid,'%s\t',probes.array_filenames{ChipL});
        end
        if length(probes.array_filenames)>1
            fprintf(OutFid,probes.array_filenames{ChipL+1});
        end
        fprintf(OutFid,'\n');
        
        %print array_factors
        for PsL=1:length(probes.name)
            fprintf(OutFid,'%s',probes.name{PsL});
            for ChipL=1:length(probes.array_filenames)
                fprintf(OutFid,'\t%f',probes.array_factors(ChipL,PsL));
            end
            fprintf(OutFid,'\n');
        end
        
        fclose(OutFid);
end


